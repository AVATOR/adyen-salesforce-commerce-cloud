/**
* Call the Adyen API to cancel order payment
*
* @input Order : dw.order.Order
*
* @output Decision : String
*
*/
importPackage( dw.system );
importPackage( dw.order );
importPackage( dw.util );
importPackage( dw.net);

function execute( args : PipelineDictionary ) : Number
{
	// Get the input parameters
	var order : Order = args.Order;
	
	// Check the input parameters
	if (order == null) {
		Logger.getLogger("Adyen").fatal("Cancellation of order payment has failed. No order was provided.");
		return PIPELET_ERROR;
	}
	
	// Get orderNo which is needed for some functions (error handling)
	var orderNo : String = order.getOrderNo();
	
	// Error handling configuration
	var fatalErrMsgPrefix : String = "Cancellation of payment for order #" + orderNo + " has failed. ";
	
	// Adyen configuration
	var merchantAccount : String = Site.getCurrent().getCustomPreferenceValue("Adyen_merchantCode");
	var endpoint : String = Site.getCurrent().getCustomPreferenceValue("pal_service_endpoint");
	var user : String = Site.getCurrent().getCustomPreferenceValue("pal_service_user");
	var pw : String = Site.getCurrent().getCustomPreferenceValue("pal_service_password");
	
	// Check the configuration
	if (merchantAccount == null) {
		Logger.getLogger("Adyen").fatal(fatalErrMsgPrefix + "merchantAccount is not set.");
		return PIPELET_ERROR;
	}
	
	if (endpoint == null) {
		Logger.getLogger("Adyen").fatal(fatalErrMsgPrefix + "Pal service URL is not set.");
		return PIPELET_ERROR;
	}
	
	// Fix the credentials if needed
	user = (user != null) ? user : '';
	pw = (pw != null) ? pw : '';
	
	// Get order values needed for the API call
	var pspReference : String = order.custom.Adyen_pspReference;
	if (pspReference == null) {
		Logger.getLogger("Adyen").fatal(fatalErrMsgPrefix + "PSP reference is not set.");
		return PIPELET_ERROR;
	}
	
	try {
		// Send a request
		var httpSvc : HTTPClient = new HTTPClient();
		var timeout : Number = dw.system.Site.getCurrent().getCustomPreferenceValue("HttpTimeout");
		
		httpSvc.setTimeout(timeout);
		httpSvc.open("POST", endpoint, user, pw);
		httpSvc.setRequestHeader("Content-type", "application/x-www-form-URLencoded; charset=UTF-8");
		httpSvc.send("action=" + "Payment.cancel" +
			"&modificationRequest.merchantAccount=" + encodeURIComponent(merchantAccount) +
			"&modificationRequest.originalReference=" + encodeURIComponent(pspReference)
		);
		
		var result : String = httpSvc.getText();
		
		// Parse the response
		if (!empty(result)) {
			if (result.indexOf("cancel-received") != -1) {
				// Define the result of script execution
				args.Decision = "SUCCESS";
				
				// Update the order
				order.custom.Adyen_eventCode = "CANCELLATION";
				
				/*
				if (order.paymentStatus != Order.PAYMENT_STATUS_NOTPAID) {
					order.setPaymentStatus(Order.PAYMENT_STATUS_NOTPAID);
				}
				*/
				
				// Log the result of operation
				Logger.getLogger("Adyen").info("Payment modification result for order #" + orderNo + ": Cancellation");
			} else {
				// Define the result of script execution
				args.Decision = "REFUSED";
				
				// Update the order
				order.custom.Adyen_eventCode = "CANCELLATION REFUSED";
				
				// Log the result of operation
				Logger.getLogger("Adyen").info("Payment modification result for order #" + orderNo + ": Cancellation Refused");
			}
		} else {
			// Define the result of script execution
			args.Decision = "ERROR";
			
			// Log the error and exit
			Logger.getLogger("Adyen").fatal(fatalErrMsgPrefix + "The call to Adyen API did not return any result.");
			return PIPELET_ERROR;
		}
	}
	catch (e) {
		// Define the result of script execution
		args.Decision = "ERROR";
		
		// Log the error and exit
		Logger.getLogger("Adyen").fatal(fatalErrMsgPrefix + "An error occurred during the call to Adyen API.");
		return PIPELET_ERROR;
	}
	
   	return PIPELET_NEXT;
}
